"""setuptools for TOHIL

this file is generated by autoconf from setup.py.in

make your changes there and rerun ./config.status or reconfigure with your
favorite configure invocation

all of the @-quoted strings should be substituted from configuration
parameters by this process

...or edit setup.py with the knowledge that the next time you configure you'll lose your changes


"""

# by autoconf setup.py.in is made into setup.py
PKG_INCLUDES = """ @PKG_INCLUDES@ """
TCL_INCLUDES = """ @TCL_INCLUDES@ """

# this is where tclConfig.sh resides
TCL_BIN_DIR = "@TCL_BIN_DIR@"

TCL_LIB_FLAG="@TCL_LIB_FLAG@"
tcl_lib = TCL_LIB_FLAG[2:]

PYTHON_INCLUDES = """ @PYTHON_INCLUDES@ """

PYTHON_LIB_DIR = """ @PYTHON_LIB_DIR@ """
PYTHON_VERSION = """ @PYTHON_VERSION@ """.strip()
PKG_LIB_FILE = """ @PKG_LIB_FILE@ """
PKG_STUB_LIB_FILE = """ @PKG_STUB_LIB_FILE@ """
LIBS = """ @LIBS@ """
DEFS = """ @DEFS@ """
PKG_CFLAGS = """ @PKG_CFLAGS@ """

prefix = "@prefix@"
exec_prefix = "@exec_prefix@"

TOHIL_VERSION = "@PACKAGE_VERSION@"

import re

def include_to_dir(string):
    return re.sub(r"""(-I| |"|')*""", "", string)

tcl_include_dir = include_to_dir(TCL_INCLUDES)
prefix_include_dir = f"{prefix}/include"
prefix_lib_dir = f"{prefix}/lib"

# Always prefer setuptools over distutils
# but hey guess what setuptools uses stuff from distutils
from setuptools import setup, Extension, find_packages
import pathlib

# dammit beavis library names are tcl86 on freebsd on tcl8.6 on mac

tohil_c_module = Extension(
    "tohil._tohil",
    define_macros=[("PACKAGE_VERSION", f'"{TOHIL_VERSION}"'),
        ("PYTHON_VERSION", f'"{PYTHON_VERSION}"')],
    # tcl library name is usually libtcl8.6 but someone uses
    # libtcl86, i'm looking at you, freebsd.
    libraries=[tcl_lib],
    include_dirs=[prefix_include_dir, tcl_include_dir],
    library_dirs=[prefix_lib_dir],
    sources=["generic/tohil.c"],
)


here = pathlib.Path(__file__).parent.resolve()

# Get the long description from the README file
long_description = (here / "README.md").read_text(encoding="utf-8")

# Arguments marked as "Required" below must be included for upload to PyPI.
# Fields marked as "Optional" may be commented out.

setup(
    name="tohil",  # Required
    version=TOHIL_VERSION,  # Required
    description="tohil, a feathered serpent, binds together the serpent, python, with the feather, tcl",  # Optional
    long_description=long_description,  # Optional
    long_description_content_type="text/markdown",  # Optional (see note above)
    url="https://github.com/flightaware/tohil",  # Optional
    # This should be your name or the name of the organization which owns the
    # project.
    author="FlightAware",  # Optional
    # This should be a valid email address corresponding to the author listed above.
    author_email="notnow@flightaware.com",  # Optional
    # Classifiers help users find your project by categorizing it.
    #
    # For a list of valid classifiers, see https://pypi.org/classifiers/
    classifiers=[  # Optional
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        "Development Status :: 5 - Production/Stable",
        # Indicate who your project is intended for
        "Intended Audience :: Developers",
        "Topic :: Software Development :: Libraries :: Tcl Extensions",
        # Pick your license as you wish
        "License :: OSI Approved :: BSD License",
        # Specify the Python versions you support here. In particular, ensure
        # that you indicate you support Python 3. These classifiers are *not*
        # checked by 'pip install'. See instead 'python_requires' below.
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3 :: Only",
    ],
    keywords="tcl, programming, deity",  # Optional
    ext_modules=[tohil_c_module],
    # When your source code is in a subdirectory under the project root, e.g.
    # `src/`, it is necessary to specify the `package_dir` argument.
    package_dir={"": "pysrc"},  # Optional
    # You can just specify package directories manually here if your project is
    # simple. Or you can use find_packages().
    #
    # Alternatively, if you just want to distribute a single Python file, use
    # the `py_modules` argument instead as follows, which will expect a file
    # called `my_module.py` to exist:
    #
    #   py_modules=["my_module"],
    #
    packages=find_packages(where="pysrc"),  # Required
    # Specify which Python versions you support. In contrast to the
    # 'Programming Language' classifiers above, 'pip install' will check this
    # and refuse to install the project if the version does not match. See
    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
    python_requires=">=3.6, <4",
    # This field lists other packages that your project depends on to run.
    # Any package you put here will be installed by pip when your project is
    # installed, so they must be valid existing projects.
    #
    # For an analysis of "install_requires" vs pip's requirements files see:
    # https://packaging.python.org/en/latest/requirements.html
    # install_requires=['peppercorn'],  # Optional
    tests_require=["hypothesis"],
    # List additional groups of dependencies here (e.g. development
    # dependencies). Users will be able to install these using the "extras"
    # syntax, for example:
    #
    #   $ pip install sampleproject[dev]
    #
    # Similar to `install_requires` above, these must be valid existing
    # projects.
    extras_require={  # Optional
        "dev": ["check-manifest"],
        "test": ["coverage"],
    },
    # If there are data files included in your packages that need to be
    # installed, specify them here.
    package_data={  # Optional
        "sample": ["package_data.dat"],
    },
    # Although 'package_data' is the preferred approach, in some case you may
    # need to place data files outside of your packages. See:
    # http://docs.python.org/distutils/setupscript.html#installing-additional-files
    #
    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'
    data_files=[("my_data", ["data/data_file"])],  # Optional
    # To provide executable scripts, use entry points in preference to the
    # "scripts" keyword. Entry points provide cross-platform support and allow
    # `pip` to create the appropriate form of executable for the target
    # platform.
    #
    # For example, the following would provide a command called `sample` which
    # executes the function `main` from this package when invoked:
    # entry_points={  # Optional
    #    'console_scripts': [
    #        'sample=sample:main',
    #    ],
    # },
    # List additional URLs that are relevant to your project as a dict.
    #
    # This field corresponds to the "Project-URL" metadata fields:
    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
    #
    # Examples listed include a pattern for specifying where the package tracks
    # issues, where the source is hosted, where to say thanks to the package
    # maintainers, and where to support the project financially. The key is
    # what's used to render the link text on PyPI.
    project_urls={  # Optional
        "Bug Reports": "https://github.com/flightaware/tohil/issues",
        "Funding": "https://donate.pypi.org",
        "Say Thanks!": "http://saythanks.io/to/example",
        "Source": "https://github.com/flightaware/tohil/",
    },
)
