if {[lsearch [namespace children] ::tcltest] == -1} {
	package require tcltest
	namespace import ::tcltest::*
}

package require tohil

# =========
# tohil::eval
# =========
test tohil_eval-1.1 {incorrect usage of eval -- not enough arguments} \
	-body {tohil::eval} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::eval evalString"}

test tohil_eval-1.2 {incorrect usage of eval -- too many arguments} \
	-body {tohil::eval 1 2} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::eval evalString"}

test tohil_eval-1.3 {correct usage of eval} \
	-body {tohil::eval "5 + 5"} \
	-result 10

test tohil_eval-1.4 {incorrect usage of eval} \
	-body {tohil::eval "a = 5"} \
	-returnCodes error \
	-result {invalid syntax (<string>, line 1)}

# =========
# tohil::exec
# =========
test tohil_exec-1.1 {incorrect usage of exec -- not enough arguments} \
	-body {tohil::exec} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::exec execString"}

test tohil_exec-1.2 {incorrect usage of exec -- too many arguments} \
	-body {tohil::exec 1 2} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::exec execString"}

test tohil_exec-1.3 {correct usage of exec} \
	-body {tohil::exec "a = 5"}

test tohil_exec-1.4 {incorrect usage of exec} \
	-body {tohil::exec "a = nosuchvar"} \
	-returnCodes error \
	-result {name 'nosuchvar' is not defined}

test tohil_exec-1.5 {exec invoking python invoking tcl} \
	-body {tohil::exec "tohil.eval('set exec15 test')"}

test tohil_exec-1.6 {exec invoking python invoking tcl} \
	-body {catch {tohil::exec "tohil.eval('nonesuch')"} catchResult catchDict; return [lindex [dict get $catchDict -errorcode] 1]} \
	-result TclError

# =========
# tohil::import
# =========
test tohil_import-1.1 {incorrect import usage -- not enough arguments} \
	-body {tohil::import} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::import module"}

test tohil_import-1.2 {incorrect import usage -- too many arguments} \
	-body {tohil::import -from os} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::import module"}

test tohil_import-1.3 {basic import} \
	-body {
		tohil::import re
		tohil::exec "import sys; assert 're' in sys.modules; assert 're' in globals()"
	} -result {}

test tohil_import-1.4 {submodule import} \
	-body {
		tohil::import xml.dom
		tohil::exec "assert 'dom' in dir(xml)"
	} \
	-result {}

test tohil_import-1.5 {non-existent import} \
	-body {tohil::import aosidas} \
	-returnCodes error \
	-result {No module named 'aosidas'}

test tohil_import-1.6 {non-existent import with full trace} \
	-body {
		proc aaa {} {
			tohil::import aosidas
		}

		list [catch {aaa} err] $err $::errorInfo
	} \
	-result {1 {No module named 'aosidas'} {No module named 'aosidas' (import module failed)
from python code executed by tohil
    invoked from within
"tohil::import aosidas"
    (procedure "aaa" line 2)
    invoked from within
"aaa"}}

# =========
# tohil::call
# =========
test tohil_call-1.1 {incorrect call usage} \
	-body {tohil::call} \
	-returnCodes error \
	-result {wrong # args: should be "tohil::call ?-kwlist list? func ?arg ...?"}

test tohil_call-1.2 {basic call} \
	-body {tohil::exec {def a(): return 5**2}
	tohil::call a} \
	-result 25

test tohil_call-1.3 {basic call with args} \
	-body {
		tohil::exec {def a(x,y): return x+y}
		tohil::call a string1 string2
	} \
	-result "string1string2"

test tohil_call-1.4 {call of module function} \
	-body {
		tohil::import base64
		tohil::call base64.b64decode YXRlc3Q=
	} \
	-result atest

test tohil_call-1.5 {call of object methods} \
	-body {
		tohil::import io
		tohil::exec {a = io.StringIO(); a.write('btest'); a.seek(0)}
		tohil::call a.read
	} \
	-result "btest"

test tohil_call-1.6 {simple call exception} \
	-body {
		tohil::exec {a = lambda: 1/0}
		tohil::call a
	} \
	-returnCodes error \
	-result {division by zero}

tohil::exec {
def no_arg_kw(**kwlist):
    return str(kwlist)

def one_arg_kw(arg1, **kwlist):
    return str(arg1), str(kwlist)

def two_arg_kw(arg1, arg2, **kwlist):
    return str(arg1), str(arg2), str(kwlist)
}

test tohil_call-1.7 {kwlist stuff} \
	-body {tohil::call -kwlist "foo bar" no_arg_kw} \
	-result "{'foo': 'bar'}"

test tohil_call-1.8 {kwlist stuff} \
	-body {tohil::call -kwlist "foo bar" no_arg_kw 5} \
	-returnCodes error \
	-result "no_arg_kw() takes 0 positional arguments but 1 was given"

# not completely sure about this result
test tohil_call-1.9 {kwlist stuff} \
	-body {tohil::call -kwlist "foo bar" one_arg_kw 5} \
	-result "5 {{'foo': 'bar'}}"



test tohil_call-1.10 {stacked call exception} \
	-body {
		tohil::exec {def a(): return 5 + dict()}
		tohil::exec {def b(): return a()}
		tohil::exec {def c(): return b()}
		proc d {} {tohil::call c}
		proc e {} {d}
		e
	} \
	-returnCodes error \
	-result {unsupported operand type(s) for +: 'int' and 'dict'}


test tohil_call-1.11 {call of nonexistent functions} \
	-body {tohil::call aosdin} \
	-returnCodes error \
	-result {module '__main__' has no attribute 'aosdin'}

test tohil_call-1.12 {call of nonexistent object methods} \
	-body {tohil::eval {a = "aaa"}} \
	-returnCodes error \
	-result {invalid syntax (<string>, line 1)}

# =========
# TYPES
# =========
test types-1.1 {return True} \
	-body {
		tohil::exec {def a(): return True}
		tohil::call a
	} \
	-result 1

test types-1.2 {return False} \
	-body {
		tohil::exec {def a(): return False}
		tohil::call a
	} \
	-result 0

test types-1.3 {return None} \
	-body {
		tohil::exec {def a(): return None}
		tohil::call a
	} \
	-result {}

# not sure about this one, it returns a string of length one but
# doesn't compare successfully to \0 and cannot be scanned as
# a character
#test types-1.4 {return null byte} {
#	tohil::exec {def a(): return '\0'}
#	set a [tohil::call a]
#	list [string length $a] [expr {$a == "\0"}]
#} {1 1}

# See gotcha 1 for explanation of roundabout way of getting a unicode object.
test types-1.5 {return unicode object} {
	tohil::exec {def a(): return b'\xe0\xb2\xa0'.decode('utf-8')}
	set glyph "‡≤†"
	if {[encoding system] ne "utf-8"} {
		set glyph [encoding convertfrom utf-8 $glyph]
	}
	expr {[tohil::call a] == $glyph}
} {1}

test types-1.6 {return literal bytes} {
	tohil::exec {def a(): return '\xe0\xb2\xa0'}
	expr {[tohil::call a] == "\xe0\xb2\xa0"}
} {1}

test types-1.7 {return nested lists and dictionaries} {
	tohil::exec {def a(): return [
			(1,2),
			[u"a",["b",7]],
			{"x":[(3,4),{'a':{'b':'c'}}],"y":(4,5,6)}]}
	set a [tohil::call a]
	set ad [lindex $a 2]
	set ada [lindex [dict get $ad x] 1]
	list \
		[lindex $a 0] [lindex $a 1] [lindex [dict get $ad x] 0]\
		[dict get $ad y] [dict get [dict get $ada a] b]
} {{1 2} {a {b 7}} {3 4} {4 5 6} c}

test types-1.8 {return float} {
	tohil::exec {def a(): return 1.0/3}
	tohil::call a
} {0.3333333333333333}

test types-1.9 {return large integer} {
	tohil::exec {def a(): return 3 << 5000}
	expr {[tohil::call a] == 3 << 5000}
} {1}

test types-1.10 {return high unicode object} {
	if {[info tclversion] >= 8.7 || ([info tclversion] == 8.6 && [lindex [split [info patchlevel] .] 2] >= 10)} {
		tohil::exec {def a(): return b'\xf0\x9d\x94\x84'.decode('utf-8')}
		set glyph "ùîÑ"
		if {[encoding system] ne "utf-8"} {
			set glyph [encoding convertfrom utf-8 $glyph]
		}
		expr {[tohil::call a] == $glyph}
	} else {
		expr 1
	}
} {1}

# =========
# MODULES
# =========
test modules-1.1 {hashlib module} \
	-body {
		tohil::import hashlib
		tohil::exec {def a(): return hashlib.sha1('password'.encode('utf8')).hexdigest()}
		tohil::call a
	} \
	-result "5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8"

test modules-1.2 {zlib module} \
	-body {
		tohil::import zlib
		tohil::exec {def a(): return zlib.decompress(b'x\x9cKLL\x04\x00\x02I\x01$')}
		tohil::call a
	} \
	-result "aaa"

test modules-1.3 {datetime module} \
	-body {
		tohil::import datetime
		tohil::exec {def a(): return datetime.datetime.utcfromtimestamp(0).isoformat()}
		tohil::call a
	} \
	-result "1970-01-01T00:00:00"

test module-1.4 {sqlite3 module} \
	-body {
		tohil::import sqlite3
		tohil::exec {def a(): global b; b = sqlite3.connect(":memory:").cursor()}
		tohil::call a
		tohil::call b.execute "create table x(y integer)"
		tohil::call b.execute "insert into x values (1)"
		tohil::call b.execute "insert into x values (18)"
		tohil::call b.execute "select avg(y) from x"
		tohil::call b.fetchone
	} \
	-result 9.5

# =========
# cleanup
# =========
::tcltest::cleanupTests
